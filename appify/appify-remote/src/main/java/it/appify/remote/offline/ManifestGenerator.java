package it.appify.remote.offline;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * 
 * @author Luigi Bifulco
 *
 */
public class ManifestGenerator extends HttpServlet {

	private static final long serialVersionUID = -4114799336246028959L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		// Set the appropriate MIME content type
		resp.setContentType("text/cache-manifest");

		// set the appropriate headers so that the manifest file is never cached by the browsers
		resp.addHeader("Cache-Control", "no-cache, must-revalidate");
		resp.addHeader("Pragma", "no-cache");
		resp.addHeader("Expires", "0");

		/* CACHE SECTION */
		// outputs the manifest file header
		resp.getWriter().println("CACHE MANIFEST");
		resp.getWriter().println("");

		printCommentedProperties("/no-cache/manifest.properties", "version", resp.getWriter());

		resp.getWriter().println("CACHE:");
		resp.getWriter().println("");

		// add the gwt compilation artifacts list file, generated by the AppCacheLinker during the GWT compilation
		String moduleName = readPropertyFrom("/no-cache/manifest.properties", "gwtModuleName");
		readFile("/"+moduleName + "-artifacts.lst", resp.getWriter());

		listFiles("/to-cache/", resp.getWriter());
//		listFiles("util.js/", resp.getWriter());

		/* NETWORK SECTION */
		resp.getWriter().println("");
		
//		resp.getWriter().println("offline.html");
		
		resp.getWriter().println("NETWORK:");
		resp.getWriter().println("*");
		resp.getWriter().println("http://");
		resp.getWriter().println("");

		/* FALLBACK SECTION */
		// example/bar/ example.html
		resp.getWriter().println("");
		resp.getWriter().println("FALLBACK:");
		resp.getWriter().println("no-cache/online.json to-cache/offline.json");
		resp.getWriter().println("");

		resp.getWriter().println("SETTINGS:");
		resp.getWriter().println("prefer-online");
	}

	private String readPropertyFrom(String file, String propKey) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader(getServletContext().getRealPath("/") + file));
		String line;
		while ((line = in.readLine()) != null)
			if (line.split("=")[0].equals(propKey)) {
				return line.split("=")[1];
			} else {
				continue;
			}
		return null;
	}

	private void printCommentedProperties(String name, String propKey, PrintWriter printWriter) throws IOException {
		try {
			BufferedReader in = new BufferedReader(new FileReader(getServletContext().getRealPath("/") + name));
			String line;
			while ((line = in.readLine()) != null)
				if (line.split("=")[0].equals(propKey)) {
					printWriter.println("#" + line);
				} else {
					continue;
				}

			in.close();
		} catch (FileNotFoundException e) {
		}

	}

	private void readFile(String name, PrintWriter printWriter) throws IOException {
		try {
			BufferedReader in = new BufferedReader(new FileReader(getServletContext().getRealPath("/") + name));
			String line;
			while ((line = in.readLine()) != null)
				printWriter.println(line);
			in.close();
		} catch (FileNotFoundException e) {
		}
	}

	private void listFiles(String directoryPath, PrintWriter printWriter) {
		File directory = new File(getServletContext().getRealPath("/") + directoryPath);
		File[] files = directory.listFiles();
		if (files == null)
			return;

		for (int i = 0; i < files.length; i++) {
			File file = files[i];

			if (file.isDirectory()) {
				listFiles(directoryPath + file.getName() + "/", printWriter);
			} else {
				printWriter.println(directoryPath + file.getName());
			}
		}
	}
}
